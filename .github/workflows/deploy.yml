name: Deploy Live Event Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: live-event-service
  ECS_SERVICE: LiveEventService
  ECS_CLUSTER: LiveEventCluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: LiveEventAPI
  AWS_DEFAULT_REGION: us-east-1

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Run Unit Tests
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --filter "FullyQualifiedName!~IntegrationTests"

  # Integration Tests Job  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Verify Docker
      run: |
        docker info
        docker version
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Run Integration Tests
      run: |
        # Run integration tests with Docker containers
        dotnet test src/LiveEventService.IntegrationTests/ --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      env:
        # Ensure Testcontainers can access Docker
        DOCKER_HOST: unix:///var/run/docker.sock
        TESTCONTAINERS_RYUK_DISABLED: true

  # Build and Deploy Job - depends on tests passing
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Publish
      run: |
        dotnet publish src/LiveEventService.API/LiveEventService.API.csproj -c Release -o ./publish
        
    - name: Build and Push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition-json }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Invalidate CloudFront cache
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Deploy CDK Stack
      run: |
        cd src/infrastructure
        dotnet build
        npm install -g aws-cdk
        cdk deploy --require-approval never
        
    - name: Run database migrations
      run: |
        cd src/LiveEventService.API
        dotnet ef database update --project ../LiveEventService.Infrastructure/LiveEventService.Infrastructure.csproj --context LiveEventDbContext
        
    - name: Run smoke tests
      run: |
        # Add smoke tests to verify deployment
        echo "Running smoke tests..."
        # Example: curl -sSf ${{ secrets.API_ENDPOINT }}/health > /dev/null
        
    - name: Notify status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deployment ${{ job.status }}"
        SLACK_MESSAGE: "Deployment of ${{ github.repository }}@${{ github.sha }} to production ${{ job.status }}"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
