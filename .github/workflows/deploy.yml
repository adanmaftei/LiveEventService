name: Deploy Live Event Service

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: live-event-service
  ECS_SERVICE: LiveEventService
  ECS_CLUSTER: LiveEventCluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: LiveEventAPI
  AWS_DEFAULT_REGION: us-east-1

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # Lint/Format check (no code changes)
  lint-format:
    name: Lint / Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Install dotnet-format tool
      run: |
        dotnet tool install -g dotnet-format
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Verify code formatting
      run: dotnet format --verify-no-changes --severity error
      continue-on-error: true

  # Unit Tests Job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Run Unit Tests
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --filter "FullyQualifiedName!~IntegrationTests"

  # Integration Tests Job  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Verify Docker
      run: docker --version

    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Run Integration Tests
      run: |
        dotnet test src/tests/LiveEventService.IntegrationTests/LiveEventService.IntegrationTests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      env:
        TESTCONTAINERS_RYUK_DISABLED: true

  # Build and Deploy Job - depends on lint and tests passing
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [lint-format, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore --configuration Release
        
    - name: Deploy CDK Stack
      run: |
        cd src/infrastructure
        dotnet build
        npm install -g aws-cdk
        cdk deploy --require-approval never
        
    - name: Install dotnet-ef tool
      run: |
        dotnet tool install -g dotnet-ef
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Run database migrations
      run: |
        cd src/LiveEventService.API
        dotnet ef database update --project ../LiveEventService.Infrastructure/LiveEventService.Infrastructure.csproj --context LiveEventDbContext
        
    - name: Smoke test (health endpoint)
      env:
        API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      run: |
        echo "Running smoke test against health endpoint..."
        if [ -z "$API_ENDPOINT" ]; then
          echo "API_ENDPOINT secret not set; skipping smoke test."
          exit 0
        fi
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_ENDPOINT/health")
        if [ "$STATUS" -ne 200 ]; then
          echo "Health check failed with HTTP $STATUS"
          exit 1
        fi
        echo "Health check OK (HTTP $STATUS)"
        
    - name: Notify status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      continue-on-error: true
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Deployment ${{ job.status }}"
        SLACK_MESSAGE: "Deployment of ${{ github.repository }}@${{ github.sha }} to production ${{ job.status }}"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
