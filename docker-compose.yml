services:
  db:
    image: postgres:14
    container_name: liveevent-db
    environment:
      POSTGRES_DB: LiveEventDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - liveevent-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: liveevent-api
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=LiveEventDB;Username=postgres;Password=postgres;
      - AllowedOrigins__0=http://localhost:3000
      - AllowedOrigins__1=http://localhost:5001
      - AWS__Region=us-east-1
      - AWS__UserPoolId=us-east-1_000000001
      - AWS__S3BucketName=local-bucket
      - AWS__ServiceURL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - ConnectionStrings__Redis=redis:6379
      # OpenTelemetry export to ADOT Collector
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_SERVICE_NAME=LiveEventService
      - OTEL_RESOURCE_ATTRIBUTES=service.version=local
    ports:
      - "5000:80"
      - "5001:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liveevent-network
  redis:
    image: redis:7
    container_name: liveevent-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liveevent-network


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 10
    depends_on:
      - db
    networks:
      - liveevent-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    environment:
      - SERVICES=cognito-idp,s3,sqs,xray,logs,cloudwatch
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - EDGE_PORT=4566
    ports:
      - "4566:4566"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack-init:/etc/localstack/init/ready.d"
    networks:
      - liveevent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  otel-collector:
    image: public.ecr.aws/aws-observability/aws-otel-collector:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC (optional: expose for local tools)
      - "4318:4318" # OTLP HTTP (optional)
    depends_on:
      localstack:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    networks:
      - liveevent-network
    healthcheck:
      test: ["CMD", "true"]
      interval: 1m
      timeout: 5s
      retries: 1

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - api
    networks:
      - liveevent-network

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: ["-config.file=/etc/loki/local-config.yml"]
    volumes:
      - ./observability/loki-config.yml:/etc/loki/local-config.yml:ro
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - liveevent-network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./observability/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD-SHELL", "cat /proc/1/comm | grep -qi promtail"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - liveevent-network

  jaeger:
    image: jaegertracing/all-in-one:1.54
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC collector
      - "14268:14268" # HTTP collector
      - "9411:9411"   # Zipkin
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:14269"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - liveevent-network

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_USERS_DEFAULT_THEME=light
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    networks:
      - liveevent-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 5s
      timeout: 3s
      retries: 10

  grafana-importer:
    image: python:3.12-alpine
    container_name: grafana-importer
    depends_on:
      grafana:
        condition: service_healthy
    volumes:
      - ./observability/grafana:/app:ro
    working_dir: /app
    command: ["python", "/app/import_dashboard.py"]
    environment:
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_USER=admin
      - GRAFANA_PASS=admin
      - DASHBOARD_PATH=/app/dashboards/liveevent-overview.json
    networks:
      - liveevent-network

networks:
  liveevent-network:
    driver: bridge

volumes:
  postgres_data:
